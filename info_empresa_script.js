// info_empresa_script.js - Actualizado con sistema de edici√≥n (solo tablas) - CORREGIDO
document.addEventListener("DOMContentLoaded", function () {
  const infoEmpresaDetalle = document.getElementById("info-empresa-detalle");
  const cuerpoTablaContactos = document.getElementById(
    "cuerpo-tabla-contactos"
  );
  const filtroProducto = document.getElementById("filtro-producto");
  const filtroArea = document.getElementById("filtro-area");

  // Funci√≥n para cargar informaci√≥n de la empresa
  window.cargarInformacionEmpresa = function () {
    try {
      console.log("üîç Iniciando carga de informaci√≥n de empresa...");

      // Limpiar contenedores
      infoEmpresaDetalle.innerHTML = "";
      cuerpoTablaContactos.innerHTML = "";

      // Obtener empresa seleccionada
      let selectedCompany = obtenerParametroUrl("companyId");
      if (!selectedCompany) {
        selectedCompany = localStorage.getItem("selectedCompany");
      }
      if (!selectedCompany) {
        selectedCompany = "empresa1";
      }

      console.log("üè¢ Empresa seleccionada:", selectedCompany);

      // CARGAR DATOS EDITADOS PRIMERO
      cargarDatosEditados();

      // Verificar que la empresa existe
      if (!DATOS_EMPRESAS[selectedCompany]) {
        throw new Error(`Empresa ${selectedCompany} no encontrada`);
      }

      const datos = DATOS_EMPRESAS[selectedCompany];
      console.log("üìä Datos cargados:", datos);

      // Mostrar informaci√≥n b√°sica
      const infoHTML = `
        <div class="info-basica-container">
          <h3>${datos.nombre}</h3>
          <p><strong>Giro:</strong> ${datos.giro}</p>
          <p><strong>Direcci√≥n:</strong> ${datos.direccion}</p>
          <p><strong>Contacto Email:</strong> ${datos.contacto}</p>
          <p><strong>Tel√©fono:</strong> ${datos.telefono}</p>
        </div>
      `;
      infoEmpresaDetalle.innerHTML = infoHTML;

      // Cargar contactos
      cargarContactosAreas(selectedCompany);

      // Inicializar b√∫squeda
      inicializarBusquedaYFiltros(selectedCompany);

      // Reinicializar sistema de edici√≥n
      setTimeout(() => {
        if (typeof editManager !== "undefined") {
          editManager.modoEdicion = false;
          const exito = editManager.inicializar();
          if (!exito) {
            console.warn("EditManager no se pudo reinicializar");
          }
        }
      }, 1000);
    } catch (error) {
      console.error("‚ùå Error cargando informaci√≥n:", error);

      if (typeof errorManager !== "undefined") {
        errorManager.mostrarErrorCargaEmpresa(selectedCompany);
      }

      infoEmpresaDetalle.innerHTML = `
        <div class="error-mensaje">
          Error: No se pudo cargar la informaci√≥n.<br>
          Detalle: ${error.message}
        </div>
      `;
    }
  };

  // Funci√≥n para cargar los contactos por √°rea - CORREGIDA
  function cargarContactosAreas(companyId) {
    try {
      console.log("üìã Cargando contactos para empresa:", companyId);

      cuerpoTablaContactos.innerHTML = "";

      const contactos = DATOS_EMPRESAS[companyId]?.areas || [];
      console.log("üë• Contactos encontrados:", contactos);

      if (contactos.length === 0) {
        cuerpoTablaContactos.innerHTML = `
          <tr>
            <td colspan="6" style="text-align: center; color: #666; padding: 20px;">
              No hay datos de contactos disponibles para esta empresa.
            </td>
          </tr>
        `;
        console.log("‚ÑπÔ∏è No hay contactos para mostrar");
        return;
      }

      // Generar las filas de la tabla - CORREGIDO: Solo 6 columnas
      contactos.forEach((contacto, index) => {
        const fila = document.createElement("tr");
        fila.setAttribute("data-index", index);

        // CORREGIDO: Solo 6 columnas para coincidir con el thead
        fila.innerHTML = `
          <td><strong>${contacto.area || "N/A"}</strong></td>
          <td>${contacto.productoRequerido || "N/A"}</td>
          <td>${contacto.encargado || "N/A"}</td>
          <td>${contacto.puesto || "N/A"}</td>
          <td>${
            contacto.correo && contacto.correo !== "S.C"
              ? `<a href="mailto:${contacto.correo}" style="color: #2196F3; text-decoration: none;">${contacto.correo}</a>`
              : "S.C"
          }</td>
          <td>${contacto.telefono || "S.D"}</td>
        `;
        cuerpoTablaContactos.appendChild(fila);
      });

      console.log("‚úÖ Tabla de contactos cargada correctamente");
    } catch (error) {
      console.error("‚ùå Error cargando contactos:", error);
      if (typeof errorManager !== "undefined") {
        errorManager.mostrarError("Error al cargar los contactos por √°rea");
      }

      // Mostrar mensaje de error en la tabla
      cuerpoTablaContactos.innerHTML = `
        <tr>
          <td colspan="6" style="text-align: center; color: #d32f2f; padding: 20px;">
            Error al cargar los contactos: ${error.message}
          </td>
        </tr>
      `;
    }
  }

  // Inicializar sistema de b√∫squeda y filtrado
  function inicializarBusquedaYFiltros(companyId) {
    try {
      console.log("üîç Inicializando sistema de b√∫squeda...");

      // Verificar que searchManager existe
      if (typeof searchManager === "undefined") {
        console.warn("SearchManager no est√° disponible");
        return;
      }

      // Generar opciones de filtro din√°micamente
      const productos = searchManager.generarOpcionesFiltro(
        companyId,
        "producto"
      );
      const areas = searchManager.generarOpcionesFiltro(companyId, "area");

      console.log("üì¶ Productos para filtro:", productos);
      console.log("üè≠ √Åreas para filtro:", areas);

      // Llenar filtro de productos
      if (filtroProducto) {
        filtroProducto.innerHTML =
          '<option value="">Todos los productos</option>';
        productos.forEach((producto) => {
          const option = document.createElement("option");
          option.value = producto;
          option.textContent = producto;
          filtroProducto.appendChild(option);
        });
        console.log("‚úÖ Filtro de productos inicializado");
      }

      // Llenar filtro de √°reas
      if (filtroArea) {
        filtroArea.innerHTML = '<option value="">Todas las √°reas</option>';
        areas.forEach((area) => {
          const option = document.createElement("option");
          option.value = area;
          option.textContent = area;
          filtroArea.appendChild(option);
        });
        console.log("‚úÖ Filtro de √°reas inicializado");
      }

      // Inicializar buscador
      searchManager.inicializarBuscador(
        "buscador-contactos",
        "tabla-contactos-areas",
        function (filasVisibles) {
          console.log(
            `üëÄ Filas visibles despu√©s de b√∫squeda: ${filasVisibles}`
          );
        }
      );

      // Inicializar filtros
      searchManager.inicializarFiltroProducto(
        "filtro-producto",
        "tabla-contactos-areas"
      );
      searchManager.inicializarFiltroArea(
        "filtro-area",
        "tabla-contactos-areas"
      );

      console.log(
        "‚úÖ Sistema de b√∫squeda y filtrado inicializado correctamente"
      );
    } catch (error) {
      console.error("‚ùå Error inicializando b√∫squeda:", error);
      if (typeof errorManager !== "undefined") {
        errorManager.mostrarError("Error al inicializar sistema de b√∫squeda");
      }
    }
  }

  /**
   * Obtiene un par√°metro de la URL.
   * @param {string} name - Nombre del par√°metro.
   */
  function obtenerParametroUrl(name) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name);
  }

  // Funci√≥n de debug para verificar datos
  function verificarDatosEmpresa(companyId) {
    console.log("üîç VERIFICANDO DATOS:");
    console.log("Company ID:", companyId);
    console.log("DATOS_EMPRESAS:", DATOS_EMPRESAS);
    console.log("Empresa espec√≠fica:", DATOS_EMPRESAS[companyId]);
    console.log("√Åreas:", DATOS_EMPRESAS[companyId]?.areas);

    // Verificar localStorage
    const datosGuardados = localStorage.getItem("datosEmpresasEditados");
    console.log(
      "LocalStorage:",
      datosGuardados ? JSON.parse(datosGuardados) : "No hay datos"
    );
  }

  // Cargar la informaci√≥n al iniciar la p√°gina
  console.log("üöÄ Iniciando carga de informaci√≥n de empresa...");
  cargarInformacionEmpresa();

  // Debug
  setTimeout(() => {
    let companyId =
      obtenerParametroUrl("companyId") ||
      localStorage.getItem("selectedCompany") ||
      "empresa1";
    verificarDatosEmpresa(companyId);
  }, 2000);
});
